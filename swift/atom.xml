<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>سروش صفری</title>

  <link href="https://thecoci.me/swift//feed.xml" rel="self"/>
  <link href="https://thecoci.me/swift/"/>

  <updated>2018-06-29T10:42:38+0330</updated>
  <id>https://thecoci.me/swift/</id>
  
  <author>
    <name>سروش صفری</name>
  </author>
    
  <generator>Mira</generator>

  
  <entry>
    <title>آموزش سویفت قسمت ۶ - ارایه ها</title>
    <link href="https://thecoci.me/swift/arrays/"/>
    <id>https://thecoci.me/swift/arrays/</id>

    <published>2018-06-12T20:21:21+0330</published>
    <updated>2018-06-12T20:21:21+0330</updated>

    <content type="html"><![CDATA[<a name="more"></a>
<h1>ارایه</h1>

<p>آرایه به شما اجازه میده که مقدار زیادی از دیتا رو داخل یه مجموعه جمع کنید‍ و بعدا با استفاده از جایگاهشون توی مجموعه بهشون دسترسی داشته باشین . مثل :</p>

<pre><code class="language-swift">var evenNumbers = [2,4,6,8]
var songs = ["shake it off" , "you belong with me" , "back to december"]
</code></pre>

<p>همون طور که می بینید سویفت از براکت برای نشان دادن شروع و پایان Array استفاده میکنه و هر کدوم از ایتم های داخل array با کاما" , "از هم جدا شده . اما یه نکته ای اینجا وجود داره زمانی که میخواین ایتم های یه Array رو بخونین یا بشمارین ٬ سویفت شمارش ایتم های داخل Array رو از عدد 0 شروع میکنه . این یعنی اینکه ایتم اول 0 و ایتم دوم 1 و ایتم سوم 2 و همینطور تا اخر می باشد . لطفا این کد رو داخل playground قرار بدین :</p>

<pre><code class="language-swift">var songs = ["shake it off" , "you belong with me" , "back to december"]
songs[0]
songs[1]
songs[2]
</code></pre>

<p>توی قسمت نتیجه می بینین نوشته :   “Shake it Off", "You Belong with Me", and "Back to December” </p>

<p>به جایگاه هر item توی هر ارایه index گفته میشه و شما میتونین هر کدام از ایتم ها رو بخونین به شرط اینکه  جایگاهشون رو call کنین .</p>

<p>یک نکته مهم وجود داره و اونم اینکه ارایه ما که در مثال بالا ساختیم ۳ تا ایتم توش ذخیره شده که index های اونها میشه 0,1,2 پس اگه این کد رو توی playground قرار بدین حتما Error دریافت میکنید : [songs[3</p>

<p>در مثال بالا سویفت میدونه که ارایه ما از ۳ تا ایتم که String هستند تشکیل شده ولی شما میتونین با کد زیر ازین موضوع مطمئن بشن :</p>

<pre><code class="language-swift">var songs = ["Shake it Off", "You Belong with Me", "Back to December"]
type(of: songs)
</code></pre>

<p>اگه کد بالا رو در playground قرار بدین در قسمت نتیجه مشاهده میکنید : Array<String>.Type</p>
]]></content>

    <summary>
    &lt;p&gt;ارایه

آرایه به شما اجازه میده که مقدار زیادی از دیتا رو داخل یه مجموعه جمع کنید‍ و بعدا با استفاده از جایگاهشون توی مجموعه بهشون دسترسی داشته باشین . مثل :

var evenNumbers = [2,4,6,8]
var songs = [&quot;shake it off&quot; , &quot;you belong with me&quot; , &quot;back to december&quot;]

همون طور که می بینید سویفت از براکت برای نشان دادن شروع و پایان Array استفاده میکنه و هر کدوم از ایتم های داخل array با کاما&quot; , &quot;از هم جدا شده . اما یه نکته ای اینجا وجود داره زمانی که میخواین ایتم های یه Array رو بخونین یا بشمارین ٬ سویفت شمارش ایتم های داخل Array رو از عدد 0 شروع میکنه . این یعنی اینکه ایتم اول 0 و ایتم دوم 1 و ایتم سوم&lt;/p&gt;
    </summary>
  </entry>
  
  <entry>
    <title>آموزش سویفت قسمت ۵ - الحاق متغیر به رشته حرف</title>
    <link href="https://thecoci.me/swift/stringinterpolation/"/>
    <id>https://thecoci.me/swift/stringinterpolation/</id>

    <published>2018-06-01T16:28:13+0330</published>
    <updated>2018-06-01T16:28:13+0330</updated>

    <content type="html"><![CDATA[<a name="more"></a>
<h1 id="stringinterpolation:">الحاق متغیر به رشته حرف (String interpolation) :</h1>

<p>ترکیب کردن متغیر و یا ثابت در داخل رشته حروف (string) بهترین تعریفی هست که میشه برای این بخش انجام داد و بزارین تو مثال نشون بدم دقیقا چی هست ٬ همه کدهای توی playground رو پاک کنید بجز این خط :</p>

<pre><code class="language-swift">var name = "soroush safari"
</code></pre>

<p>اگه ما بخوایم یه پیغامی رو به کاربر نمایش بدیم که شامل اسمش باشه String interpolation چیزیه که این کار رو برای ما راحت میکنه ٬ شما فقط نیاز دارین یه " \ " و "()" کنار هم قرار بدین و همه چیز تمام ٬ مثلا‌ :</p>

<pre><code class="language-swift">var name = "soroush safari"
"your name is \(name)"
</code></pre>

<p>اگه این کد رو توی playground  قرار بدین تو قسمت نتیجه می بینین که نوشته : "your name is soroush safari" .</p>

<p>و حالا ما می تونیم اون کار رو با یک روش دیگه هم انجام بدیم :</p>

<pre><code class="language-swift">var name = "soroush safari"
"your name is " + name
</code></pre>

<p>اما این کار در اینجا کارآمد نیست و این روش فقط مخصوص زمانی که میخواین چند تا متغیر رو با هم ترکیب کنید می باشد و بعلاوه اینکه روشی که اول ذکر شد در مورد data type کاملا هوشمند و تمام موارد رو خودش اماده میکنه به طور مثال :</p>

<pre><code class="language-swift">var name = "soroush safari"
var age = 25
var latitude = 36.166667    

"your name is \(name) , you'r age is \(age) and you'r latitude is \(latitude) . "
</code></pre>

<p>نکته ای در اینجا وجود داره و اونهم اینه که روش دوم ( + ) خیلی سخته چون سویفت به شما اجازه نمیده که Int یا Double رو به String اضافه کنید .</p>

<p><strong>نکته</strong> : یکی از  قدرتمند ترین ویژگی های الحاق رشته ( String interpolation ) اینه که همه چیز در بین ()\ به صورت جمله دستوری سویفت حساب میشه ٬ مثلا میتونین اعمال ریاضی باهاش انجام بدین :</p>

<pre><code class="language-swift">var age = 25
" you are \(age) years old. in another \(age) years will be \(age * 2) "
</code></pre>

<p>دوستان لطفا هر بخش رو که می خونین حتما تمرین کنید و با دقت انجام بدین . منتظر پست بعدی باشین :))</p>
]]></content>

    <summary>
    &lt;p&gt;الحاق متغیر به رشته حرف (String interpolation) :

ترکیب کردن متغیر و یا ثابت در داخل رشته حروف (string) بهترین تعریفی هست که میشه برای این بخش انجام داد و بزارین تو مثال نشون بدم دقیقا چی هست ٬ همه کدهای توی playground رو پاک کنید بجز این خط :

var name = &quot;soroush safari&quot;

اگه ما بخوایم یه پیغامی رو به کاربر نمایش بدیم که شامل اسمش باشه String interpolation چیزیه که این کار رو برای ما راحت میکنه ٬ شما فقط نیاز دارین یه &quot; \ &quot; و &quot;()&quot; کنار هم قرار بدین و همه چیز تمام ٬ مثلا‌ :

var name = &quot;soroush safari&quot;
&quot;your name is \(name)&quot;

اگه این کد رو توی playground  قرار بدین تو قسمت نتیجه می بینین که نو&lt;/p&gt;
    </summary>
  </entry>
  
  <entry>
    <title>آموزش سویفت قسمت ۴ - عملگرها</title>
    <link href="https://thecoci.me/swift/oprators/"/>
    <id>https://thecoci.me/swift/oprators/</id>

    <published>2018-06-01T12:39:58+0330</published>
    <updated>2018-06-01T12:39:58+0330</updated>

    <content type="html"><![CDATA[<a name="more"></a>
<h1 id="operators">عملگرها (Operators)</h1>

<p>عملگرها (Operators) شبیه همون علامت هایی که توی اولین کلاس های ریاضی خوندین ٬ مثلا :</p>

<p>برای جمع : +</p>

<p>برای ضرب : *</p>

<p>برای تقسیم : /</p>

<p>برای منها : -</p>

<p>برای مساوی : = </p>

<p>که این عملگرهای ریاضی دقیقا توی سویفت هم هستن .</p>

<p>اجازه بدین یکم به صورت پایه ازین عملگرها استفاده کنیم ٬ لطفا کدهای زیر رو داخل playground قرار بدین :</p>

<pre><code class="language-swift">var a = 10
a = a + 1
a = a - 1
a = a * a
</code></pre>

<p>در قسمت نتیجه شما مشاهده میکنید که نوشته  : 10 ٬ 11 ٬ 10 و100 ٬ حالا این رو امتحان کنید :</p>

<pre><code class="language-swift">var b = 10
b += 10
b -= 10 
</code></pre>

<p>عملگر =+ یعنی مقدار جدید رو اضافه و بعد نتیجه رو داخل متغیر قرار بده . توی مثال ما اول  به مقدار متغیر b عدد 10  اضافه کن  و بعد نتیجه جدید رو داخل متغیر b قرار بده . شما میتونین تصور کنین " =- " همین طور عمل میکنه اما از متغیر کم میکنه بجای اینکه اضافه کنه پس کد ما توی قسمت نتیجه به شما اعداد : 10 ٬ 20  ٬ 10 رو به شما نشان میده .</p>

<p>بعضی از این عملگرها برای data type های دیگه هم استفاده میشه ٬ مثلا 2 تا متغیر Double رو بهم اضافه کنید :</p>

<pre><code class="language-swift">var a = 1.1
var b = 2.2 
var c = a + b
</code></pre>

<p>یا مثلا 2 تا String رو با علامت "+" با هم جمع کنید :</p>

<pre><code class="language-swift">var name1 = "soroush safari"
var name2 = "ali"
var both = name1 + " and  " + name2
</code></pre>

<p>که این مثال به عنوان نتیجه "soroush safari and ali" رو به شما نشان میده .</p>

<p>یکی دیگه از عملگرهای رایج که شما در اینده خواهید دید % است که یعنی "عدد سمت راست رو برعدد سمت چپ تقسیم کن و باقیمانده رو برگردون" ٬ که به عنوان مثال 3 ٪ 9 میشه 0 و  3 ٪ 10 میشه 1 چون 10 تقسیم بر 3 باقیمانده میشه 1 .</p>

<h1 id="comparisonoperators:">عملگرهای مقایسه ای (Comparison operators) :</h1>

<p>سویفت یه مجموعه از عملگرها داره که میتونن ۲ تا مقدار(value) رو با هم مقایسه کنن ٬ برای مثال :</p>

<pre><code class="language-swift">var a = 1.1
var b = 2.2
var c = a + b

c &gt; 3
c &gt;= 3
c &gt; 4
c &lt; 4
</code></pre>

<p>این نشان میده بزرگتر ">" و بزرگتر مساوی ">=" و کوچکتر "&lt;" که شما توی قسمت نتیجه میبینید نوشته :</p>

<p><img src="/swift/images/5-swift.jpg" alt="xcode" id="xcode" /> </p>

<p>برای نتیجه از data type های bool استفاده کرده چون جواب این جملات فقط میتونه درست یا غلط باشه(false or true) .</p>

<p>اگه شما میخواین مساوی بودن 2 مقداررو بررسی کنید باید از == استفاده کنید ٬ به عنوان مثال :</p>

<pre><code class="language-swift">var name = "soroush safari"
name == "soroush safar"
</code></pre>

<p>که در قسمت نتیجه خواهید دید نوشته true اما حالا یه چیزی که توی مقایسه String ها شما ممکنه باهاش برخورد کنید بزرگ یا کوچک بودن حروف یعنی :</p>

<p>"soroush safari" - "Soroush Safari" - "SOROUSH SAFARI" این 3 تا String  شاید در متن یکی باشن اما بخاطرحساسیت بزرگ و کوچک بودن حروف در سویفت اگه از == استفاده کنید به شما false نشان میده :</p>

<p><img src="/swift/images/6-swift.jpg" alt="xcode" id="xcode" /> </p>

<p>حالا من میخوام به شما یه عملگر دیگه " ! " که به معنی "نیست " رو به شما معرفی کنم که این عملگر همون علامت تعجب است . به عنوان مثال :</p>

<pre><code class="language-swift">var stayInHome = true
stayInHome
!stayInHome
</code></pre>

<p>که دومین جمله مقدار true برمیگردونه اما سومین جمله که میگه stayInHome نباشه مقدار False رو برمیگردونه . </p>

<p>شما میتونین ! رو با = استفاده کنید" =!" یعنی "برابر نیست" ٬ به عنوان مثال :</p>

<pre><code class="language-swift">var name = "soroush safari"
name == "soroush safari"
name != "soroush safari"
</code></pre>

<p>اگه در هر قسمت گیج شدین اصلا مشکلی نیست و در اینده کاملا و بصورت عمیق همه مطالب رو توضیح میدم . حتما هر بخش رو تکرار و تمرین کنید .</p>

<p>منتظر پست بعدی باشین :))</p>
]]></content>

    <summary>
    &lt;p&gt;عملگرها (Operators)

عملگرها (Operators) شبیه همون علامت هایی که توی اولین کلاس های ریاضی خوندین ٬ مثلا :

برای جمع : +

برای ضرب : *

برای تقسیم : /

برای منها : -

برای مساوی : = 

که این عملگرهای ریاضی دقیقا توی سویفت هم هستن .

اجازه بدین یکم به صورت پایه ازین عملگرها استفاده کنیم ٬ لطفا کدهای زیر رو داخل playground قرار بدین :

var a = 10
a = a + 1
a = a - 1
a = a * a

در قسمت نتیجه شما مشاهده میکنید که نوشته  : 10 ٬ 11 ٬ 10 و100 ٬ حالا این رو امتحان کنید :

var b = 10
b += 10
b -= 10 

عملگر =+ یعنی مقدار جدید رو اضافه و بعد نتیجه رو داخل متغیر قرار بده . توی مثال ما اول  به مقدار متغیر &lt;/p&gt;
    </summary>
  </entry>
  
  <entry>
    <title>آموزش سویفت قسمت ۳ - انواع دیتا</title>
    <link href="https://thecoci.me/swift/datatype/"/>
    <id>https://thecoci.me/swift/datatype/</id>

    <published>2018-05-30T08:54:12+0330</published>
    <updated>2018-05-30T08:54:12+0330</updated>

    <content type="html"><![CDATA[<a name="more"></a>
<h2>انواع دیتا</h2>

<p>ما چندین نوع دیتا داریم که شما یکی از مهم ترین نوع دیتا رو دیدین حتما میپرسین کی و کجا ؟ همون موقع که یه متن رو داخل متغییر ذخیره کردین و متن توی سویفت به اسم String شناخته میشه (رشته ای از کاراکترها) .</p>

<p>String میتونه خیلی طولانی باشه (چندین میلیون حرف) و یا کوچیک (یک حرف) یا حتی خالی باشه ٬تعداد اصلا مهم نیست  و هر تعداد حرف توی سویفت به چشم String دیده میشه .سویفت میدونه اون متغیر name که تو اموزش قبل ساختیم داره دیتا از نوع String رو نگه داری میکنه چون وقتی داشتین متغیر رو می ساختین دیتایی از نوع String داخلش قرار دادین : "soroush safari"</p>

<p>اما اگه شما طبق مثال زیر عمل کنید سویفت از شما ایراد میگیره :</p>

<pre><code>var name
name = "soroush sfari"
</code></pre>

<p>و متن خطا میگه : "type annotation missing in pattern" معنیش اینه که : "من نمیتونم بفهمم متغیر name از چه نوع دیتا هست چون شما مقدار کافی به من اطلاعات در موردش ندادین " .</p>

<p>در این مرحله شما ۲ تا گزینه دارین : یا اینکه متغیر رو بسازین و در همون خط اول کد مقدار دهی اولیه کنید یا از Type annotation استفاده کنید . که این روش اینطوریه که شما همون اول به سویفت میگین چه نوع دیتایی قراره <strong>بعدا</strong> داخل متغیر ذخیره کنید .</p>

<p>شما گزینه اول رو تو اموزش قبل دیدین پس نگاه کنید گزینه دوم چطوری کار میکنه ٬ ما میدونیم متغیر name قراره دیتایی از نوع String ذخیره کنه پس میتونیم به سویفت اینو بگیم که اول اسم بعد یک colon ( به ۲ نقطه روی هم colon گفته میشه = : ) و بعد String ٬ اینجوری :</p>

<pre><code>var name: String
name = "soroush safari"
</code></pre>

<p>الان دیگه شما Error از Xcode دریافت نمی کنین چون سویفت میدونه  متغیر name قراره در <strong>اینده</strong> چه نوع دیتایی رو ذخیره کنه .</p>

<p><strong>نکته</strong> : بعضی از مردم قبل و بعد از colon یه فاصله ای قرار میدن "var name : String"  اما اونا اشتباه میکنن و شما باید ازین کار اجتناب کنید .</p>

<p>ما در اینجا  اینو یادگرفتیم که سویفت همیشه میخواد بدونه چه نوع دیتایی داخل  هر متغیر یا ثابتی قراره ذخیره بشه . شما نمیتونین بیخیال این قضیه بشن و این ماجرا خیلی خوبه چون به این کار میگن type safety  (بعضی چیزا رو نمیشه به فارسی برگردوند) - اگه شما به سویفت بگین قرار داخل متغیری String ذخیره کنید و بعدا دیتایی از نوع دیگه ذخیره کنید سویفت از شما ایراد میگیره و از اشتباهات آتی جلوگیری میکنه .</p>

<h2 id="int:">Int :</h2>

<p>اما حالا میپردازیم به یکی دیگه از انواع دیتاهای مهم سویفت به اسم Int که مخفف شده : integer ( عدد <em>*صحیح *</em> )  است . integer عدد رند صحیح است مثل : ۳ ٬ ۳۰ ٬ ۳۰۰ یا حتی ۱۶۷۷۷۲۱۶- برای مثال : </p>

<pre><code>var name: String
name = "soroush safari"

var age: Int
age = 25
</code></pre>

<p>نکته مهم اینجا این که وقتی دارین نوع دیتا رو تایپ میکنید String یا Int حتما حرف اولش باید با حرف بزرگ باشه ولی برای name و age نیازی نیست - این قرارداد استاندار در سویفت که همین اول کار سعی کنید حتما ازش پیروی کنید . </p>

<p>ما الان ۲ تا متغیر از ۲ نوع مختلف data داریم ٬ که میتونین قدرت type safety توی این مثال ببینین   :</p>

<pre><code>var name: String
name = 23

var age:Int
age = "soroush safari"
</code></pre>

<p>این 2 خط کد بالا رو با کد قبلی توی playground عوض کنید . توی این کد شما دارین سعی میکنین یه مقدار Int رو داخل یه متغیر از نوع String قرار بدین که Xcode وارد عمل میشه و یه Error به شما نمایش میده که این خیلی عالیه و قدرت سویفت رو نشون میده .</p>

<h2 id="floatdouble:">Float و Double :</h2>

<p>اجازه بدین به ۲ تا data type دیگه نگاهی بندازیم یه اسم های Float و Double که این ۲ نوع data type راهی که سویفت عدد های اعشاری رو میتونه ذخیره کنه مثل : ۳.۱ ٬ ۳.۱۳۱ ٬ ۳.۱۴۱۵۹۲۶ یا حتی ۱۶۷۷۷۲۱۶.۵-  .</p>

<p>اینجا ۲ نوع دیتا داریم برای اینکه شما مشخص کنید چقدر دقت اعشار لازم دارین اما در بیشتر مواقع خود شرکت اپل گفته از Double استفاده کنید چون دقت بالاتری در اعشار داره .</p>

<p>این کدها رو داخل playground قرار بدین  :</p>

<pre><code>var latitude: Double
latitude = 36.166667

var longitude: Float
longitude = -86.783333
</code></pre>

<p>شما میتونین این ۲ تا عدد رو در قسمت سمت راست مشاهده کنید ٬ اما اگه دقت کنید یه اختلافی میبینید  . ما گفتیم longitude برابر با 86.783333- باشه اما قسمت نتیجه نوشته 86.78333- و در اینجا یک رقم  رو از اخر حذف کرده ٬ این دقیقا همون موضوع دقت اعشاری بود که گفتم و اینکه Float تا رقم اعشار کمتری رو میتونه ذخیره کنه .</p>

<h2 id="boolean:">Boolean :</h2>

<p>سوئیفت یک data Type داخلی داره که برای مشخص کردن صحیح و غلط ٬ که بهش میگن Bool و این نوع data type فقط  و فقط برای مشخص کردن صحیح و غلط است (True یا False) . به مثال زیر دقت کنید :</p>

<pre><code>var isLate: Bool
isLate = true (صحیح)

var weatherIsSunny: Bool
weatherIsSunny = false (غلط)

var missABeat: Bool
missABeat = false (غلط)
</code></pre>

<p>که بعدا به صورت کامل در مورد هر کدوم صحبت می کنیم و از هر کدوم کلی مثال میزنیم .</p>

<p>منتظر پست بعدی باشین :))</p>
]]></content>

    <summary>
    &lt;p&gt;انواع دیتا

ما چندین نوع دیتا داریم که شما یکی از مهم ترین نوع دیتا رو دیدین حتما میپرسین کی و کجا ؟ همون موقع که یه متن رو داخل متغییر ذخیره کردین و متن توی سویفت به اسم String شناخته میشه (رشته ای از کاراکترها) .

String میتونه خیلی طولانی باشه (چندین میلیون حرف) و یا کوچیک (یک حرف) یا حتی خالی باشه ٬تعداد اصلا مهم نیست  و هر تعداد حرف توی سویفت به چشم String دیده میشه .سویفت میدونه اون متغیر name که تو اموزش قبل ساختیم داره دیتا از نوع String رو نگه داری میکنه چون وقتی داشتین متغیر رو می ساختین دیتایی از نوع String داخلش قرار دادین : &quot;soroush safari&quot;

اما اگه شما طبق مثال زیر عمل کنید سویفت&lt;/p&gt;
    </summary>
  </entry>
  
  <entry>
    <title>آموزش سویفت قسمت ۲ - متغییر و ثابت ها</title>
    <link href="https://thecoci.me/swift/variableandconstant/"/>
    <id>https://thecoci.me/swift/variableandconstant/</id>

    <published>2018-05-30T08:52:58+0330</published>
    <updated>2018-05-30T08:52:58+0330</updated>

    <content type="html"><![CDATA[<a name="more"></a>
<h2 id="variablesandconstants:">ثابت ها و متغییر ها (Variables and constants ) :</h2>

<p>هر برنامه ای نیاز داره تا اطلاعاتش رو تو یه جایی ذخیره کنه و توی Swift (در اصل کل زبان های برنامه نویسی که شاید توی بعضی از زبان ها ثابت وجود نداشته باشه ) ما ۲ تا راه برای این کار داریم :</p>

<p>متغیرها و ثابت ها </p>

<p>متغیر محلی برای ذخیره اطلاعات که میتونیم مقدارش رو هروقت که خواستیم تغییر بدیم و ثابت محلی برای ذخیره اطلاعات که شما یه بار توش اطلاعاتی رو ذخیره میکنید و دیگه هیچ وقت نمیشه تغییرش داد . پس متغیر دارای اطلاعاتی که قابل تغییر و ثابت دارای اطلاعاتی که نمیشه تغییرش داد می باشد - آسون بود ٬ درسته ؟</p>

<p>داشتن هر ۲ روش ممکنه بیهوده به نظر برسه و شما با خودتون بگین یه متغیر میسازم و هیچ وقت اطلاعاتش رو تغییر نمیدم ٬ چه نیازی به ثابت هست ؟ اما ممکنه اشتباه کنیم .</p>

<p>یکی از فایده های جدا سازی متغیر و ثابت اینه که Xcode اگه اشتباهی کنیم به ما میگه مثلا :</p>

<p>اگه من بگم این اطلاعات  ثابت هست و هیچ وقت تغییر نمیکنه چون همون لحظه میدونم این قرار نیست تغییر کنه اما بعدش ۱۰ خط پایین تر ممکنه فراموش کنم و بخوام اطلاعات داخل constant رو عوض کنم اینجاست که این قابلیت به کمک ما میاد و میگه داری اشتباه میزنی این تغییر ناپذیره :))</p>

<p>و در اخر اینکه برنامه وقتی میدونه این اطلاعات ثابت هست میتونه راحتتر و سریع تر اجرا بشه ٬ پس ثابت ها چیز مهمی هستند .</p>

<p>توی Swift ما میتونیم یه متغیر با دستور Var بسازیم مثل این :</p>

<pre><code>var name = "Soroush safari"
</code></pre>

<p>اجازه بدین اینو داخل playground قرار بدیم و نتیجه رو ببنیم . همه چیز رو به جز خط import UIkit پاک کنید و متغییر و زیرش اضافه کنید و شما باید چیزی شبیه این رو ببینید :</p>

<p><img src="/swift/images/3-swift.jpg" alt="xcode" id="xcode" /> </p>

<p>اما نیاز نیست هر بار از var استفاده کنید این فقط برای زمانی که شما دارین یه متغیر رو میسازین ٬ این کد رو توی playground تست کنید :</p>

<pre><code>var name = "soroush safari"
name = "Romeo"
</code></pre>

<p>پس اولین خط یه متغیر به اسم name میسازه که با "soroush safari" مقدار دهی اولیه شده و بعد در خط دوم ما اطلاعات داخل متغیر name رو update کردیم به "Romeo" و حالا مقدار متغیر name دیگه "soroush safari" نیست و به "Romeo" تبدیل شده . </p>

<p>حالا چی میشه اگه ما یه ثابت بسازیم به جای متغیر ؟ جالبه ٬ برای ساخت ثابت یا همون constant از کلمه let به جای var استفاده میکنیم ٬ پس شما میتونین خط اول کدتون رو تغییر بدین به let name به جای var name  :</p>

<pre><code>import UIkit

let name = "soroush safari"
name = "Romeo"
</code></pre>

<p>اما یه مشکلی اینجا هست : xcode یه علامت قرمز رنگ به عنوان Error به شما نشون داده ( سمت چپ name ) و اگه شما روی اون علامت کلیک کنید متن خطا به شما میگه :  <em>*“   'Cannot assign to 'let' value 'name  ” *</em></p>

<p>در اصل میگه شما سعی کردین مقدار ثابت توی خط دوم رو تغییر بدین که این امکان پذیر نیست ٬ فوق العاده نیست ؟</p>

<p><img src="/swift/images/4-swift.jpg" alt="xcode" id="xcode" /> </p>

<p>پس ثابت ها بهترین راه هستند که به خودمون و Xcode قول بدیم این مقدار عوض نخواهد شد ٬ به این خاطر که اگه شما اشتباه بکنین Swift از اجرا شدن برنامه جلوگیری میکنه .</p>

<p><em>نکته مهم</em> :</p>

<p>اسم متغیر و ثابت باید تک باشه (unique) ٬ اگه مثل زیر متغیر و ثابت رو با یک اسم مشابه بسازین Xcode از کد شما ایراد میگیره :</p>

<pre><code>import UIkit

let name = "soroush safari"
var name = "Romeo"
</code></pre>

<p>منتظر قسمت بعد باشید :))</p>
]]></content>

    <summary>
    &lt;p&gt;ثابت ها و متغییر ها (Variables and constants ) :

هر برنامه ای نیاز داره تا اطلاعاتش رو تو یه جایی ذخیره کنه و توی Swift (در اصل کل زبان های برنامه نویسی که شاید توی بعضی از زبان ها ثابت وجود نداشته باشه ) ما ۲ تا راه برای این کار داریم :

متغیرها و ثابت ها 

متغیر محلی برای ذخیره اطلاعات که میتونیم مقدارش رو هروقت که خواستیم تغییر بدیم و ثابت محلی برای ذخیره اطلاعات که شما یه بار توش اطلاعاتی رو ذخیره میکنید و دیگه هیچ وقت نمیشه تغییرش داد . پس متغیر دارای اطلاعاتی که قابل تغییر و ثابت دارای اطلاعاتی که نمیشه تغییرش داد می باشد - آسون بود ٬ درسته ؟

داشتن هر ۲ روش ممکنه بیهوده به نظر برسه و ش&lt;/p&gt;
    </summary>
  </entry>
  
  <entry>
    <title>آموزش سویفت قسمت ۱ - نصب ایکس کد</title>
    <link href="https://thecoci.me/swift/howtoinstallxcode/"/>
    <id>https://thecoci.me/swift/howtoinstallxcode/</id>

    <published>2018-05-30T08:49:23+0330</published>
    <updated>2018-05-30T08:49:23+0330</updated>

    <content type="html"><![CDATA[<a name="more"></a>
<h2 id="xcodepalyground:">چگونه Xcode رو نصب کنیم و یک palyground بسازیم :</h2>

<p>خوب بریم سر اصل مطلب ٬ Xcode محیطی برای برنامه نویسی برای محصولات اپل است که بصورت رایگان در App stpre مک وجود داره ٬ پس اولین حرکت این که روی این لینک کلیک کنید تا به صفحه نصب برین : <a href="https://itunes.apple.com/us/app/xcode/id497799835?mt=12"><strong>نصب ایکس کد</strong></a></p>

<p>خوب حجم xcode یکم زیاده پس تا دانلود میشه من میتونم چند تا چیز رو براتون توضیح بدم :</p>

<ol>
<li>ios :</li>
</ol>

<p>ای اوا اس اسم سیستم عاملی که روی تمام ایفون و ایپد ها اجرا میشه . ای او اس مسئول اجرای تمام عملکردهای پایه ای گوشی مثل :  تماس گرفتن ٬ اجرا اپلیکیشن و …. رو داره .</p>

<ol>
<li>macOs :</li>
</ol>

<p>مک او اس اسم سیستم عامل اپل که روی لپ تاپ و کامپیوترهای اپل اجرا میشه و به صورت فنی پدر بزرگ ios و tvOs میباشد :))</p>

<ol>
<li>Swift :</li>
</ol>

<p>سویفت اسم زبان برنامه نویسی اپل که به شما اجازه میده برای ios , macOs , tvOs برنامه بنویسین .</p>

<ol>
<li>UIkit :</li>
</ol>

<p>یو ای کیت در اصل یک سری ابزار برای  رابط کاربری( ui = user interface ) ای او اس است مثل : دکمه ها ٬ کادر نوشته ٬ ناوبری و…. که شما با استفاده از سویفت از این ها استفاده میکنید </p>

<ol>
<li>ios simulator :</li>
</ol>

<p>این برنامه همراه با xcode نصب میشه و دقیقا مثل یه ایفون کارمیکنه که به شما اجازه میده اپ ios که ساختین رو بدون نیاز به گوشی ایفون اجرا و تست کنید .</p>

<ol>
<li>playground :</li>
</ol>

<p>محیطی کوچیک برای تست کردن کدهای Swift که به شما اجازه میده داخلش کد بنویسید و بلافاصه نتیجه رو ببنید . شما داخلش یه اپ واقعی نمیسازین اما برای یادگیری خیلی مفیده که ما کمی جلوتر ازش استفاده میکنیم . </p>

<ol>
<li>Cocoa touch :</li>
</ol>

<p>در اصل میشه بهش گفت فریمورک بزرگ اپل که شامل همه چیز هست مثل : UIkit , Mapkit , core Graphics و ………..</p>

<p>جدی Xcode نصب شد ؟ خب بریم برای ادامه ……</p>

<h2 id="playground:">معرفی playground :</h2>

<p>وقتی شما Xcode رو اجرا میکنین با چیزی شبیه به عکس زیر مواجه میشین . به قسمت Get started with playground برین .</p>

<p><img src="/swift/images/1-swift.jpg" alt="xcode" id="xcode" /> </p>

<p>xcode از شما یه اسم میخواد برای فایل playground که قرار بسازیم اما همون " MyPlayground " که خودش پشنهاد داده خوبه و وقتی شما next رو بزنین ازتون جایی که این فایل رو سیو کنه میخواد پس دسکتاپ رو انتخاب کنید و create رو بزنین .</p>

<p>اگه مراحل بالا رو به درستی انجام داده باشین playground براتون باز میشه که به ۲ قسمت تقسیم شده که سمت چپ یه سری نوشته هست :</p>

<pre><code>//: Playground - noun: a place where people can play
import UIKit

var str = "Hello, playground” 
</code></pre>

<p>و سمت راست هم نوشته : </p>

<pre><code>"Hello, playground"
</code></pre>

<p>این قسمت بندی خیلی مهمه چون یک قسمت مربوط به کد و قسمت دیگه نتیجه کد و سمت چپ شما میتونین روی کد تغییرات ایجاد کنید و سمت راست که قسمت نتیجه است ٬ نتیجه رو ببینین .</p>

<p><img src="/swift/images/2-swift.jpg" alt="xcode" id="xcode" /> </p>

<p>در حالی که شما تایپ میکنید ٬ playground به صورت اتوماتیک کد جدید رو اجرا میکنه و نتیجه رو update میکنه  برای مثال اگه شما فقط بنویسید str در قسمت نتیجه خواهید دید که دوباره نوشته شده "hello playground " چون یکبار که شما اون متغیر رو ساختین و دفعه دوم برای اینکه شما اون رو به اصطلاح call کردین (زیاد درگیر نشین ٬ اگه جایی متوجه نمیشین اصلا نگران نباشین چون در اینده عمیق تر در موردش توضیح میدم ) .</p>
]]></content>

    <summary>
    &lt;p&gt;چگونه Xcode رو نصب کنیم و یک palyground بسازیم :

خوب بریم سر اصل مطلب ٬ Xcode محیطی برای برنامه نویسی برای محصولات اپل است که بصورت رایگان در App stpre مک وجود داره ٬ پس اولین حرکت این که روی این لینک کلیک کنید تا به صفحه نصب برین : نصب ایکس کد

خوب حجم xcode یکم زیاده پس تا دانلود میشه من میتونم چند تا چیز رو براتون توضیح بدم :

ios :

ای اوا اس اسم سیستم عاملی که روی تمام ایفون و ایپد ها اجرا میشه . ای او اس مسئول اجرای تمام عملکردهای پایه ای گوشی مثل :  تماس گرفتن ٬ اجرا اپلیکیشن و …. رو داره .

macOs :

مک او اس اسم سیستم عامل اپل که روی لپ تاپ و کامپیوترهای اپل اجرا میشه و به صورت فنی پد&lt;/p&gt;
    </summary>
  </entry>
  
</feed>