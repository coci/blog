<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>سروش صفری</title>

  <link href="https://koky.ir/django//feed.xml" rel="self"/>
  <link href="https://koky.ir/django/"/>

  <updated>2020-01-22T11:08:37+0330</updated>
  <id>https://koky.ir/django/</id>
  
  <author>
    <name>سروش صفری</name>
  </author>
    
  <generator>Mira</generator>

  
  <entry>
    <title>اضافه کردن google captcha</title>
    <link href="https://koky.ir/django//add-google-captcha-django/"/>
    <id>https://koky.ir/django//add-google-captcha-django/</id>

    <published>2020-01-22T10:35:34+0330</published>
    <updated>2020-01-22T10:35:34+0330</updated>

    <content type="html"><![CDATA[<a name="more"></a>
<h3 id="اضافه_کردن_google_captcha_:">اضافه کردن google captcha :</h3>

<p>امروزتوی پست قصد دارم اموزش اضافه کردن google captcha رو با شما به اشتراک بزارم .</p>

<p>گوگل captcha یکی از معروف ترین راه حل ها برای جلوگیری از bot و spam هست و پیاده سازی خیلی راحتی داره .</p>

<h4 id="ثبت_سایت_در_گوگل_:">ثبت سایت در گوگل :</h4>

<p>در اولین گام نیازمند اضافه کردن دامنه خودمون توی سایت google هستیم . برای این کار وارد لینک زیر بشین:</p>

<p><a href="https://www.google.com/recaptcha/admin">captcha google</a></p>

<p>و پس از وارد شدن با حساب google خودتون باید صفحه مانند زیر رو ببینید :</p>

<p><img src="/django/images/captcha1.jpg" alt="block" id="block"></p>

<p>دکمه + بالای صفحه رو بزنین و اطلاعات رو مانند عکس زیر پر کنید :</p>

<ul>
<li>به جای label که من نوشتم test شما یک اسم دلخواه وارد کنید .</li>
<li>به جای قسمت domains شما باید ادرس دامنه خودتون رو وارد کنید .</li>
</ul>

<p><img src="/django/images/captcha2.jpg" alt="block" id="block"></p>

<p>بعد از اتمام مراحل بالا سایت گوگل یه کدی رو به شما میده که باید اون رو وارد جنگو کنیم . حالا وارد settings.py پروژه بشین و در پایین صفحه کد زیر رو وارد کنید :</p>

<p>( دقت کنید شما در اینجا به جای 6LdRSRYUAAAAAOnk5yom باید کد خودتون رو وارد کنید )</p>

<pre><code>GOOGLE_RECAPTCHA_SECRET_KEY = '6LdRSRYUAAAAAOnk5yom'
</code></pre>

<p>#### پیاده سازی :</p>

<p>حالا وقتش رسیده google captcha رو به template مورد نظر وارد کنیم . فرض کنید من در این صفحه یک فرم دارم که میخوام هربار کاربر بخواد این فرم رو پر کنه باید google captcha رو تایید کنه .</p>

<ul>
<li>در کد پایین در جلوی data-sitekey شما باید کد که از گوگل دریافت کردید و داخل settings.py وارد کردید رو در این قسمت هم وارد کنید</li>
</ul>

<pre><code> #myapp/templates/index.html

 &lt;form method="post"&gt;
    {% csrf_token %}
    {{ form.as_p }}

    &lt;script src='https://www.google.com/recaptcha/api.js'&gt;&lt;/script&gt;
    &lt;div class="g-recaptcha" data-sitekey="6LdRSRYUAAAAAFCqQ1aZnYfRGJIlAUMX3qkUWlcF"&gt;&lt;/div&gt;

    &lt;button type="submit" class="btn btn-primary"&gt;Post&lt;/button&gt;
  &lt;/form&gt;
</code></pre>

<p>حالا در views.py مربوط به همین template کدهای زیر رو وارد کنید :</p>

<pre><code>import urllib
import urllib2
import json

from django.shortcuts import render, redirect
from django.conf import settings
from django.contrib import messages

from .models import Comment
from .forms import CommentForm


def comments(request):
    comments_list = Comment.objects.order_by('-created_at')

    if request.method == 'POST':
        form = CommentForm(request.POST)
        if form.is_valid():

            ''' Begin reCAPTCHA validation '''
            recaptcha_response = request.POST.get('g-recaptcha-response')
            url = 'https://www.google.com/recaptcha/api/siteverify'
            values = {
                'secret': settings.GOOGLE_RECAPTCHA_SECRET_KEY,
                'response': recaptcha_response
            }
            data = urllib.urlencode(values)
            req = urllib2.Request(url, data)
            response = urllib2.urlopen(req)
            result = json.load(response)
            ''' End reCAPTCHA validation '''

            if result['success']:
                form.save()
                messages.success(request, 'New comment added with success!')
            else:
                messages.error(request, 'Invalid reCAPTCHA. Please try again.')

            return redirect('comments')
    else:
        form = CommentForm()

    return render(request, 'core/comments.html', {'comments': comments_list, 'form': form})
</code></pre>

<p>کار تمام است . اما یه توضیحی بدم که روند کار به چه شکل هست . در function بالا در مرحله اول اطلاعات رو برای google میفرستیم اگه captcha توسط کاربر به درستی زده شده باشه یه True و اگه اشتباه باشه False به ما برگشت داده میشه . حالا ما با دستور :</p>

<pre><code>if result['success']:
</code></pre>

<p>میام چک میکنیم که ایا True هست و در صورت True بودن response از سمت گوگل میایم دیتا رو وارد دیتابیس میکنیم و در غیر این صورت به کاربر پیامی مبنی در بر اینکه google captcha رو نزده یا اشتباه وارد کرده میدیم .</p>

<p>موفق باشید .</p>]]></content>

    <summary>
    &lt;p&gt;اضافه کردن google captcha :

امروزتوی پست قصد دارم اموزش اضافه کردن google captcha رو با شما به اشتراک بزارم .

گوگل captcha یکی از معروف ترین راه حل ها برای جلوگیری از bot و spam هست و پیاده سازی خیلی راحتی داره .

ثبت سایت در گوگل :

در اولین گام نیازمند اضافه کردن دامنه خودمون توی سایت google هستیم . برای این کار وارد لینک زیر بشین:

captcha google

و پس از وارد شدن با حساب google خودتون باید صفحه مانند زیر رو ببینید :

دکمه + بالای صفحه رو بزنین و اطلاعات رو مانند عکس زیر پر کنید :

به جای label که من نوشتم test شما یک اسم دلخواه وارد کنید .
به جای قسمت domains شما باید ادرس دامنه خودتون ر&lt;/p&gt;
    </summary>
  </entry>
  
  <entry>
    <title>نحوه دیپلوی کردن پروژه جنگو</title>
    <link href="https://koky.ir/django//how-deploy-django/"/>
    <id>https://koky.ir/django//how-deploy-django/</id>

    <published>2020-01-16T12:37:01+0330</published>
    <updated>2020-01-16T12:37:01+0330</updated>

    <content type="html"><![CDATA[<a name="more"></a>
<h1 id="مقدمه">مقدمه</h1>

<p>یکی از چیزایی که برای خیلی از دولوپر ها سوال هست این که یه پروژه جنگو رو چطوری روی هاست پیاده سازی (deploy) کنیم . اگه این برای شما هم سوال هست در ادامه همراه باشین .</p>

<p>من توی این اموزش برای دیپلوی کردن جنگو از ابزار زیر استفاده میکنم :</p>

<ul>
<li>ubuntu server : سروری که من برای پروژه در نظر گرفتم ubuntu 18.04 هست</li>
<li>nginx : به عنوان وب سرور</li>
<li>Postgres : به عنوان دیتابیس پروژه</li>
<li>Gunicorn : برای ارتباط پروژه با nginx</li>
</ul>

<p>در نهایت اگه شما تصمیم به استفاده از ابزارهای دیگه ای به غیر از مواردی که در بالا ذکر شده رو دارین ٬ میتونین از این اموزش استفاده کنین فقط توی اون قسمت کاری مشابه به کاری که من انجام دادم رو با ابزار مورد نظر خودتون  انجام بدین و در اصل مراحل یکی هست .</p>

<p><strong>( من توی این پست یه سری از کلمه ها رو به زبان انگیلیسی نوشتم چون براشون واژه معادل فارسی پیدا نکردم ٬ اگه پیشنهادی برای هرکدوم داشتین توی قسمت کامنت های این پست برام بنویسن که کلمه هارو تغییربدم)</strong></p>

<h3 id="نصب_نیازمندی_های_سرور_:">نصب نیازمندی های سرور :</h3>

<p>برای شروع ما نیازمند یه سری package هستیم که روی سرور نصب کنیم . دستورات زیر رو داخل سرور خودتون وارد کنید :</p>

<p><strong>( دقت کنید نیازی به کپی کردن علامت $ نیست )</strong></p>

<pre><code class="language-python">$   sudo apt update
$   sudo apt install python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx curl
</code></pre>

<p>توی دستورات بالا اول ما سرور رو اپدیت کردیم و در دستور دوم python , Postgres , nginx و curl رو روی سرور نصب کردیم .</p>

<h3 id="ساخت_دیتابیس_:">ساخت دیتابیس :</h3>

<p>برای استفاده از Postgres  به عنوان دیتابیس پروژه ما نیاز به ساخت یک دیتابیس و کاربر هستیم ٬ پس دراین قسمت ما یک دیتابیس و یک کاربر میسازیم که بتونیم پروژه جنگو رو به Postgres متصل کنیم . </p>

<p>در اولین مرحله ما باید database برای پروژه بسازیم اما قبلش باید به کامند لاین postgresql  وصل شدیم .  برای این کار دستور زیر رو وارد کنید :</p>

<pre><code class="language-python">$   sudo -u postgres psql 
</code></pre>

<p>بعد از متصل شدن به postgresql ما یک دیتابیس میسازیم ٬دستور زیر رو وارد کنید :</p>

<p>( به جای myproject که اسم دیتابیس من میباشد ٬ شما هر اسمی که میخواین رو وارد کنید )</p>

<pre><code class="language-python">postgres=# CREATE DATABASE myproject;
</code></pre>

<p>حال باید یه کاربر جدید برای دیتابسی که ساختیم ایجاد کنیم ٬ برای این کار دستور زیر را وارد کنید :</p>

<p>(  به جای myprojectuser که username کاربر میباشد و password که رمز عبور این کاربر هست ٬ شما  username و پسورد داخواه خودتون رو وارد کنید ) </p>

<p>دقت کنید که <strong>این اطلاعاتی رو که وارد میکنید در جایی یادداشت کنید</strong> .</p>

<pre><code class="language-python">postgres=# CREATE USER myprojectuser WITH PASSWORD 'password';
</code></pre>

<p>حالا که کاربر دیتابس شما ساخته شد ما باید یه سری تنظیمات که با جنگو سازگار هست رو به کاربر دیتابیس اضافه کنیم .</p>

<p>( به جای myprojectuser شما باید username که در قسمت بالا وارد کردین رو قرار بدین )</p>

<pre><code class="language-python">postgres=# ALTER ROLE myprojectuser SET client_encoding TO 'utf8';
postgres=# ALTER ROLE myprojectuser SET default_transaction_isolation TO 'read committed';
postgres=# ALTER ROLE myprojectuser SET timezone TO 'UTC';
</code></pre>

<p>حالا ما یه دیتابیس ساختیم و یک کاربر ٬ الان باید این کاربر رو به دیتابیس که در مرحله اول ساختیم وصل کنیم . برای این کار :</p>

<p>( به جای myproject شما باید اسم دیتابیس خودتون رو وارد کنید و به جای myprojectuser شما باید username کاربری که ساختین رو قرار بدین  )</p>

<pre><code class="language-python">postgres=# GRANT ALL PRIVILEGES ON DATABASE myproject TO myprojectuser;
</code></pre>

<p>و در اخر هم برای خروج از prompt دیتابیس دستور زیر رو وارد کنید :</p>

<pre><code class="language-python">postgres=# \q
</code></pre>

<h3 id="ایجاد_یک_python_virtual_environment_برای_پروژه_:">ایجاد یک Python Virtual Environment برای پروژه :</h3>

<p>ما برای نصب package ها مربوط به پروژه از Virtual Environment استفاده میکنیم ٬ اگه نمیدونین Virtual Environment چی هست توصیه میکنم برین توی گوگل سرچ کنین و یادش بگیرین :)</p>

<p>خوب برای شروع نیاز داریم Virtual Environment رو روی سرور نصب کنیم :</p>

<pre><code class="language-python">$   sudo -H pip3 install --upgrade pip
$   sudo -H pip3 install virtualenv
</code></pre>

<p>حالا باید پوشه برای ساخت Virtual Environment و پروژه جنگو ایجاد کنیم و به داخل اون پوشه بریم :</p>

<p>( به جای myprojectdir که اسم پوشه میباشد ٬ شما اسم دلخواه خودتون رو وارد کنید )</p>

<pre><code class="language-python">$   mkdir ~/myprojectdir
$   cd ~/myprojectdir
</code></pre>

<p>حال برای ساخت یک Virtual Environment دستور زیر رو وارد کنید :</p>

<p>( به جای myprojectenv که اسم Virtual Environment ما میباشد ٬ شما اسم دلخواه خودتون رو وارد کنید )</p>

<pre><code class="language-python">$   virtualenv myprojectenv
</code></pre>

<p>حال که Virtual Environment ما ساخته شد ٬ برای فعال سازی اون دستور زیر رو وارد کنید :</p>

<p>( به جای myprojectenv که اسم Virtual Environment  میباشد ٬ شما اسمی که در دستور بالا وارد کردین رو قرار بدین )</p>

<pre><code class="language-python">$   source myprojectenv/bin/activate
</code></pre>

<p>تا اینجای کار ما یک Virtual Environment ساختیم و فعالش کردیم ٬ الان میتونیم تمام package های مورد نیاز خودمون از قبیل خود django رو توی این Virtual Environment نصب کنیم :</p>

<pre><code class="language-python">$   pip install django gunicorn psycopg2-binary
</code></pre>

<h3 id="ساخت_و_انجام_تنظیمات_پروژه_جنگو_:">ساخت و انجام تنظیمات پروژه جنگو :</h3>

<p>دقت داشته باشین که من در این بخش یک پروژه جدید جنگو میسازیم که اگه شما از قبل روی کامپوتر خودتون پروژه رو ساختین بعضی از کارهای این قسمت رو نیاز نیست انجام بدین و فقط کل پروژه با استفاده github یا ابزار های دیگه به سرور منتقل کنین .</p>

<p>توی اولین گام یه پروژه جدید میسازیم :</p>

<p>( به جای myproject که اسم پروژه ما میباشد ٬ شما اسم دلخواه خودتون رو وارد کنید )</p>

<pre><code class="language-python">$   django-admin.py startproject myproject .
</code></pre>

<p>حالا برای انجام تنظیمات مورد نیاز جنگو باید فایل settings.py رو تغییر بدیم . برای این کار :</p>

<p>( به جای myprojectdir که اسم پوشه اصلی و myproject که اسم پروژه ما میباشد ٬ شما مقادیری که در بالا وارد کردین رو قرار بدین )</p>

<pre><code class="language-python">$   nano ~/myprojectdir/myproject/settings.py
</code></pre>

<p>اگه به درستی این مراحل رو طی کرده باشین ٬ میبینین که وارد یه ویرایشگر متن شدین که محتویات فایل settings.py پروژه در اون قرار داره . حالا  قسمت ALLOWED_HOSTS رو شکل زیر تغییر بدین :</p>

<p>( شما باید به جای your_server_domain_or_IP که ادرس دامنه یا ip سرور میباشد باید دامنه یا ip سرور خودتون رو وارد کنید )</p>

<pre><code class="language-python">ALLOWED_HOSTS = ['your_server_domain_or_IP', 'localhost']
</code></pre>

<p>حال کمی پایین تر برین و قسمت DATABASES رو به شکل زیر تغییر بدین :</p>

<p>دقت کنید که جلوی مقدار 'NAME' باید اسم دیتابیسی که ساختیم و  جلوی 'USER' نام کاربری که ساختین و همین طور در جلوی 'PASSWORD' رمز عبور کاربر دیتابیس که در بالا وارد کردین رو قرار بدین .</p>

<pre><code class="language-python">DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'myproject',
        'USER': 'myprojectuser',
        'PASSWORD': 'password',
        'HOST': 'localhost',
        'PORT': '',
    }
}
</code></pre>

<p>حال در پایین این فایل درست زیر '/STATIC_URL = '/static مقدار زیر رو وارد کنید :</p>

<pre><code class="language-python">STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
</code></pre>

<p>حالا با  نگه داشتن  ترکیبی control و x کیبورد این فایل رو ذخیره کنین .</p>

<p>در این قسمت باید جداول دیتابیس مربوط به جنگو رو بسازیم :</p>

<pre><code class="language-python">$   python manage.py makemigrations
$   python manage.py migrate
</code></pre>

<p>حال یه super user برای دسترسی به admin panel جنگو میسازیم :</p>

<pre><code class="language-python">$   python manage.py createsuperuser
</code></pre>

<p>یه نکته مهم در اینجا هست که برای اینکه nginx بتونه css های پروژه رو serve کنه ما باید یه پوشه برای تمام css ها بسازیم و css ها رو داخل اون قرار بدیم و به nginx مسیر این پوشه رو بدیم . جنگو برای ساخت این پوشه و انتقال فایل های css یه دستور اماده داره که ازون استفاده میکنیم ٬ در اصل این دستور داخل root پروژه یه فایل با نام static می سازه و تمام css ها رو داخل این فایل انتقال میده ٬ برای این کار دستور زیر رو وارد کنید :</p>

<p><strong>(در نظر بگیرین در هر زمان که شما تغییری در css های پروژه میدین یا فایل css جدیدی اضافه میکنید ٬ باید این دستور رو دوباره بزنین )</strong></p>

<pre><code class="language-python">$   python manage.py collectstatic
</code></pre>

<p>حالا برای تست پروژه باید پورت 8000 سرور رو به اصطلاح باز کنیم ٬ برای اینکار دستور زیر رو وارد کنید :</p>

<pre><code class="language-python">$   sudo ufw allow 8000
</code></pre>

<p>حالا برای اجرای پروژه دستور زیر رو وارد کنید :</p>

<pre><code class="language-python">$   python manage.py runserver 0.0.0.0:8000
</code></pre>

<p>کار تمام است . حالا اگه داخل مرورگر ادرس زیر رو وارد کنید :</p>

<pre><code class="language-url">http://server_domain_or_IP:8000
</code></pre>

<p>بعد از این کار باید داخل مرورگر صفحه زیر رو ببینید :</p>

<p><img src="/django/images/django_index.jpg" alt="xcode" id="xcode"> </p>

<p>اگه همه چیز درست بود کلید ترکیبی <strong>CTRL-C</strong>  رو بزنین .</p>

<h3 id="تست_کردن_gunicorn_:">تست کردن Gunicorn :</h3>

<p>حالا وقتش رسیده با استفاده از gunicorn پروژه رو تست کنیم . برای این کار :</p>

<p>( به جای myproject اسم پروژه خودتون رو وارد کنید )</p>

<pre><code class="language-python">$   gunicorn --bind 0.0.0.0:8000 myproject.wsgi
</code></pre>

<p>و دوباره توی مرورگر ادرس زیر رو وارد کنید و باید صفحه ای مثل قبل رو مشاهده کنید‌:</p>

<pre><code>http://server_domain_or_IP:8000
</code></pre>

<p>اگه همه چیز درست بود کلید ترکیبی <strong>CTRL-C</strong>  رو بزنین .</p>

<h3 id="ساخت_فایل_socket_و_service_برای_gunicorn_:">ساخت فایل socket و service برای Gunicorn :</h3>

<p>ما در مرحله قبل gunicorn رو تست کردیم ولی برای پروژه از روش قبل بهتر استفاده نکنیم و به جاش از یه روش بهتر استفاده کنیم . برای این کار دستور زیر رو وارد کنید :</p>

<p><strong>(این دستور یه socket برای gunicorn می سازه .)</strong></p>

<pre><code class="language-python">$   sudo nano /etc/systemd/system/gunicorn.socket
</code></pre>

<p>بعد از زدن دستور بالا میبینیم که دوباره وارد محیط ویرایشگر متن شدیم اما این دفعه هیچی چیزی داخل صفحه نیست و ما باید اطلاعات رو واردش کنیم . برای این کار کدهای زیر رو وارد کنید :</p>

<pre><code class="language-python">[Unit]
Description=gunicorn socket

[Socket]
ListenStream=/run/gunicorn.sock

[Install]
WantedBy=sockets.target
</code></pre>

<p>حالا با استفاده کلید های ترکیبی <strong>CTRL-X</strong> این فایل رو سیو کنید .</p>

<p>در گام بعدی احتیاج داریم فایل service که برای gunicorn هست رو بسازیم :</p>

<pre><code class="language-python">$   sudo nano /etc/systemd/system/gunicorn.service
</code></pre>

<p>حال در صفحه باز شده کدهای زیر رو وارد کنید :</p>

<p><strong>نکته بسیار مهم :</strong></p>

<ul>
<li><p>جلوی User باید نام کاربری ubuntu server که الان باهاش ssh کردین رو وارد کنین .</p></li>
<li><p>جلوی WorkingDirectory باید ادرس دقیق پوشه که پروژه شما در اون قرار داره رو وارد کنید .</p></li>
<li><p>جلوی ExecStart و به جای ادرس /home/sammy/myprojectdir/myprojectenv/  شما باید ادرس دقیق پوشه که توش Virtual Environment پروژه شما قرار داره رو بنویسن و به جای /myprojectenv/ باید اسم Virtual Environment که قبلا ساخته اید رو قرار بدین .</p></li>
<li><p>و در پایین همین بخش  ExecStart باید به جای کلمه (myproject)   در کد myproject.wsgi:application اسم پروژه که ساختین رو قرار بدین .</p>

<p>( زیاد سخت نیست و اگه کمی به کد پایین دقت کنید متوجه میشین که دقیقا باید چیکار کنین)</p></li>
</ul>

<pre><code>[Unit]
Description=gunicorn daemon
Requires=gunicorn.socket
After=network.target

[Service]
User=sammy
Group=www-data
WorkingDirectory=/home/sammy/myprojectdir
ExecStart=/home/sammy/myprojectdir/myprojectenv/bin/gunicorn \
          --access-logfile - \
          --workers 3 \
          --bind unix:/run/gunicorn.sock \
          myproject.wsgi:application

[Install]
WantedBy=multi-user.target
</code></pre>

<p>حالا با استفاده کلید های ترکیبی <strong>CTRL-X</strong> این فایل رو سیو کنید .</p>

<p>الان ما میتونیم فایل socket مه ساختیم رو اجرا کنیم . برای این کار دستورات زیر رو وارد کنید :</p>

<pre><code class="language-python">$   sudo systemctl start gunicorn.socket
$   sudo systemctl enable gunicorn.socket
</code></pre>

<h3 id="اضافه_کردن_تنظیمات_nginx:">اضافه کردن تنظیمات nginx:</h3>

<p>برای ساختن تنظیمات nginx کد زیر رو وارد کنید :</p>

<p>( به جای myproject یه اسم دلخواه میتونین قرار بدین )</p>

<pre><code class="language-python">$   sudo nano /etc/nginx/sites-available/myproject
</code></pre>

<p>در صفحه که جلوی شما قرار داره کدهای زیر رو وارد کنید :</p>

<pre><code>server {
    listen 80;
    server_name server_domain_or_IP;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /home/sammy/myprojectdir;
    }

    location / {
        include proxy_params;
        proxy_pass http://unix:/run/gunicorn.sock;
    }
}
</code></pre>

<p><strong>نکته بسیار مهم :</strong></p>

<ul>
<li>در جلو server_name باید ادرس دامنه خودتون رو وارد کنید</li>
<li>در قسمت root /home/sammy/myprojectdir  به جای ادرس وارد شده ادرس دقیق پروژه خودتون رو وارد کنید .</li>
</ul>

<p>حالا با استفاده کلید های ترکیبی <strong>CTRL-X</strong> این فایل رو سیو کنید .</p>

<p>در گام بعدی کد زیر رو وارد کنید :</p>

<p>( به جای myproject اسمی که در مرحله قبل وارد کردید رو قرار بدین )</p>

<pre><code class="language-python">$   sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled
</code></pre>

<p>حالا دستور زیر رو وارد کنید تا تنظیمات به nginx اعمال بشه : </p>

<pre><code class="language-python">$   sudo nginx -t
$   sudo systemctl restart nginx
</code></pre>

<p>و در اخر کدهای زیر رو وارد کنید :</p>

<pre><code class="language-python">$   sudo ufw delete allow 8000
$   sudo ufw allow 'Nginx Full'
</code></pre>

<p>حالا مرورگر خودتون رو باز کنین و ادرس دامنه خودتون رو بزنین و باید دوباره صفحه ابتدایی جنگو رو مشاهده کنید .دقت کنید که نیازی به وارد کردن 8000 در اخر دامنه نیست . </p>

<p>تبریک میگم کار تمام است !</p>

<p>اگه مشکلی و یا غلط املایی در نوشتار این پست بود حتما داخل کامنت های این پست بنده رو در جریان قرار بدین تا اصلاح کنم .</p>

<p>خیلی خوشحال میشم نظراتتون رو با من به اشتراک بزارین و اگه این پست به دردتون خورد حتما با دیگران به اشتراک بزارین تا اون ها هم بتونن استفاده کنن .</p>

<p>موفق باشد .</p>]]></content>

    <summary>
    &lt;p&gt;مقدمه

یکی از چیزایی که برای خیلی از دولوپر ها سوال هست این که یه پروژه جنگو رو چطوری روی هاست پیاده سازی (deploy) کنیم . اگه این برای شما هم سوال هست در ادامه همراه باشین .

من توی این اموزش برای دیپلوی کردن جنگو از ابزار زیر استفاده میکنم :

ubuntu server : سروری که من برای پروژه در نظر گرفتم ubuntu 18.04 هست
nginx : به عنوان وب سرور
Postgres : به عنوان دیتابیس پروژه
Gunicorn : برای ارتباط پروژه با nginx

در نهایت اگه شما تصمیم به استفاده از ابزارهای دیگه ای به غیر از مواردی که در بالا ذکر شده رو دارین ٬ میتونین از این اموزش استفاده کنین فقط توی اون قسمت کاری مشابه به کاری که من انجام دادم ر&lt;/p&gt;
    </summary>
  </entry>
  
  <entry>
    <title>بازیابی رمز عبور</title>
    <link href="https://koky.ir/django//بازیابی-رمز-عبور/"/>
    <id>https://koky.ir/django//بازیابی-رمز-عبور/</id>

    <published>2019-07-18T13:41:11+0330</published>
    <updated>2019-07-18T13:41:11+0330</updated>

    <content type="html"><![CDATA[<a name="more"></a>
<p>سلام امروز با شما هستیم از سری اموزش های جنگو :‌ ( بازیابی رمز عبور)</p>

<p>یکی از مسائلی که برنامه نویس های فریمورک جنگو ممکن باهاش درگیر باشن ٬ ساخت قسمت بازیابی رمز عبور که جنگو به صورت پیشفرض این قابلیت رو اماده کرده و برنامه نویس ها میتونن از این قابلیت به راحتی  استفاده کنن .</p>

<p>نحوه کار بازیابی رمز عبور یا همون forgot password به این شکل میباشد که وقتی کاربر بروی فراموشی رمز عبور کلیک کرد :</p>

<p>۱- ایمیل کاربری خودش رو در یک فرم وارد کنه .</p>

<p>۲- یه پیام بهش نشون داده بشه که ایمیل بازیابی برای شما فرستاده شد .</p>

<p>۳ - روی لینک که داخل ایمیل براش ارسال شده کلیک کنه که تا وارد فرمی بشه که بتونه پسورد جدید رو وارد کنه  .</p>

<p>۴ - و در اخر به کاربر پیامی مبنی بر این که رمز عبور شما با موفقیت تغییر یافت نمایش داده شود .</p>

<p>نکته : لینکی که برای کاربر ارسال میشه تا کاربر با کلیک روی اون بتونه به صفحه تغییر رمز عبور هدایت بشه توسط خود فریمورک جنگو رمز نگاری میشه .</p>

<p>خوب بریم برای انجام کار :</p>

<h4 id="مرحله_۱_:">مرحله ۱ :</h4>

<p>در مرحله اول یه app جدید داخل پروژه به اسم forgot_passowrd بسازید :</p>

<pre><code>pythhon manage.py startapp forgot_password
</code></pre>

<p>و در اخر این app رو داخل settings.py اضافه کنید :</p>

<pre><code>### django_project/settings.py

INSTALLED_APPS = [
    ...
    'forgot_password.apps.ForgotPasswordConfig' , 
    ...

]
</code></pre>

<h4 id="مرحله_۲:">مرحله ۲:</h4>

<p>در مرحله دوم در داخل اپ forgot_password یه پوشه به نام ( templates  )  ایجاد کنید و در داخل ان یه پوشه دیگه به نام ( forgot_password) و داخل ان فایل های زیر رو ایجاد کنید :</p>

<p>1- password_reset_form.html</p>

<p>2- password_reset_email.html</p>

<p>3- password_reset_subject.txt</p>

<p>4- password_reset_done.html</p>

<p>5- password_reset_confirm.html</p>

<p>6- password_reset_complete.html</p>

<p>الان پروژه شما بدین شکل میباشد :</p>

<pre><code>-django_project /
        -forgot_password/
                -templates/
                    -forgot_password/
                        -password_reset_form.html
                        -password_reset_email.html
                        -password_reset_subject.txt
                        -password_reset_done.html
                        -password_reset_confirm.html
                        -password_reset_complete.html
                - __init__.py
                -admin.py
                -apps.py
                -models.py
                -tests.py
                -views.py

        -django_project/
            -settings.py
            -urls.py
            - __init__.py
            -wsgi.py
</code></pre>

<p>حال محتویات فایل ها رو به صورت زیر تغییر بدین :</p>

<p>۱ - فایل : password_reset_form.html</p>

<pre><code>### forgot_password/password_reset_form.html


&lt;p&gt; please enter your mail &lt;/p&gt;
&lt;form method="POST"&gt;
    {% csrf_token %}
    {{form.as_p}}
    &lt;button type='submit'&gt;send&lt;/button&gt;
&lt;/form&gt;
</code></pre>

<p>۲ -فایل :  password_reset_email.html </p>

<pre><code>### forgot_password/password_reset_email.html 


{% autoescape off %}
کاربر {{ user.get_username }}:
برای ریست کردن پسورد روی لینک زیر کلیک کنید :

{{ protocol }}://{{ domain }}{% url 'password_reset_confirm' uidb64=uid token=token %}


با تشکر,
{% endautoescape %}
</code></pre>

<p>۳- فایل :  password_reset_subject.txt</p>

<pre><code>### forgot_password/password_reset_subject.txt


بازیابی رمز عبور
</code></pre>

<p>۴- فایل : password_reset_done.html</p>

<pre><code>### forgot_password/password_reset_done.html


 &lt;p&gt;ایمیل بازیابی رمز عبور با موفقیت برای شما ارسال شد .&lt;/p&gt;
</code></pre>

<p>۵- فایل : password_reset_confirm.html</p>

<pre><code>### forgot_password/password_reset_confirm.html


&lt;p&gt; please enter your new password &lt;/p&gt;
&lt;form method="POST"&gt;
    {% csrf_token %}
    {{form.as_p}}
    &lt;button type='submit'&gt;change&lt;/button&gt;
&lt;/form&gt;
</code></pre>

<p>۶- فایل : password_reset_complete.html</p>

<pre><code>### forgot_password/password_reset_complete.html


&lt;p&gt; رمز عبور شما با موقیت تغییر یافت .&lt;/p&gt;
</code></pre>

<h4 id="مرحله_۳:">مرحله ۳:</h4>

<p>در مرحله سوم در URLCONF اصلی پروژه  لینک های زیر رو اضافه کنید :</p>

<pre><code>### django_project/urls.py


from django.urls import path, include
from django.contrib.auth import views as forogotpassword_view



urlpatterns = [
  path('password-reset/', forogotpassword_view.PasswordResetView.as_view( 
        template_name='forgot_password/password_reset_form.html',
        email_template_name='forgot_password/password_reset_email.html',
        subject_template_name='forgot_password/password_reset_subject.txt'
        ), 
        name='password_reset'),

    path('password-reset/done/', forogotpassword_view.PasswordResetDoneView.as_view(  
        template_name='forgot_password/password_reset_done.html'
    ), 
    name='password_reset_done'),


    path('password-reset-confirm/&lt;uidb64&gt;/&lt;token&gt;/',
        forogotpassword_view.PasswordResetConfirmView.as_view(  
            template_name='forgot_password/password_reset_confirm.html'
        ), 
        name='password_reset_confirm'),


    path('password-reset-complete/',
         forogotpassword_view.PasswordResetCompleteView.as_view(  
             template_name='forgot_password/password_reset_complete.html'
         ), 
         name='password_reset_complete'),

]
</code></pre>

<p>و در پایان اگه شما لینک :</p>

<p>http://127.0.0.1:8000/passowrd_reset</p>

<p>رو باز کنید ٬ مشاهده میکنید تمامی مراحل به درستی کار خواهد کرد . </p>]]></content>

    <summary>
    &lt;p&gt;سلام امروز با شما هستیم از سری اموزش های جنگو :‌ ( بازیابی رمز عبور)

یکی از مسائلی که برنامه نویس های فریمورک جنگو ممکن باهاش درگیر باشن ٬ ساخت قسمت بازیابی رمز عبور که جنگو به صورت پیشفرض این قابلیت رو اماده کرده و برنامه نویس ها میتونن از این قابلیت به راحتی  استفاده کنن .

نحوه کار بازیابی رمز عبور یا همون forgot password به این شکل میباشد که وقتی کاربر بروی فراموشی رمز عبور کلیک کرد :

۱- ایمیل کاربری خودش رو در یک فرم وارد کنه .

۲- یه پیام بهش نشون داده بشه که ایمیل بازیابی برای شما فرستاده شد .

۳ - روی لینک که داخل ایمیل براش ارسال شده کلیک کنه که تا وارد فرمی بشه که بتونه پسورد جدید &lt;/p&gt;
    </summary>
  </entry>
  
</feed>